trigger:
- main

# Variables
# trigger:
# - main

# Variables
variables:
  tag: 'latest'  # Fixed tag to use in the pipeline
  DEV_ENVIRONMENT: 'dev'
  QA_ENVIRONMENT: 'qa'
  imageName: 'capstonedockertest2'
  acrName: 'javancapstone.azurecr.io'
  
stages:
#Build stage
# Stage-1:

- stage: Build 
  displayName: Build Stage
  jobs:
  - job: Build
    displayName: Build Job
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # Task-1: Build Docker Image and push to Azure Container Registry ACR
    - task: Docker@2
      inputs:
        containerRegistry: 'ACR repo'
        repository: 'Capstonedockertest2'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(tag)
          $(Build.SourceVersion)
    # ## Publish Artifacts pipeline code in addition to Build and Push          
    # - bash: echo Contents in System Default Working Directory; ls -R $(System.DefaultWorkingDirectory)        
    # - bash: echo Before copying Contents in Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)        

#Stage- 2 Copies Kubernetes manifest files from a source folder to the build's artifact staging directory and publishes them as an artifact in a CI/CD pipeline.

- stage: CopyAndPublishArtifacts
  displayName: 'Copy and Publish Kuberente Artifacts'
  jobs:
  - job: CopyAndPublishArtifactsJob
    displayName: 'Copy and Publish Kuberente Artifacts'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: CopyFiles@2
      displayName: 'Copy Kuberente Artifacts'
      inputs:
        SourceFolder: 'kube-manifests'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/kube-manifests'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Kuberente Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/kube-manifests'
        ArtifactName: 'kube-manifests'
# Stage-3: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'terraform-aks-azurerm-svc-con'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Install Terraform
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install terraform


## Step-3: Validate Terraform Manifests (terraform init, terraform validate)

      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendType: 'azurerm'
          backendServiceArm: 'terraform-aks-azurerm-svc-con'
          backendAzureRmResourceGroupName: 'terraform-storage-rg'
          backendAzureRmStorageAccountName: 'tfstatefilestoreaccount'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'aks-base.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: false      




# Stage-2: 
# Deployment-1: Deploy Dev AKS Cluster
## Step-1: Define Variables for environments
## Step-2: Download SSH Secure File
## Step-3: Terraform Initialize (State Storage to store in Azure Storage Account for Dev AKS Cluster)
## Step-4: Terraform Plan (Create Plan)
## Step-5: Terraform Apply (Use the plan created in previous step) 
          
- stage: DeployAKSClusters
  jobs:
    - deployment: DeployDevAKSCluster
      displayName: DeployDevAKSCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEV_ENVIRONMENT)      
      strategy:
        runOnce:
          deploy:
            steps:            
            - task: DownloadSecureFile@1
              displayName: Download SSH Key
              name: sshkey
              inputs:
                secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
            - task: TerraformCLI@0
              displayName: Terraform Init
              inputs:
                command: 'init'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                backendType: 'azurerm'
                backendServiceArm: 'terraform-aks-azurerm-svc-con'
                backendAzureRmResourceGroupName: 'terraform-storage-rg'
                backendAzureRmStorageAccountName: 'tfstatefilestoreaccount'
                backendAzureRmContainerName: 'tfstatefiles'
                backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Plan
              inputs:
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                environmentServiceName: 'terraform-aks-azurerm-svc-con'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
                allowTelemetryCollection: false
            - task: TerraformCLI@0
              displayName: Terraform Apply
              inputs:
               command: 'apply'
               workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
               environmentServiceName: 'terraform-aks-azurerm-svc-con'
               commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
               allowTelemetryCollection: false


#Stage 5:Deploys Kubernetes manifests representing a development environment, deployment, and load balancer
  
# - stage: DeployDevEnv
#   displayName: 'DeployDevEnv'
#   jobs:
#   - job: DeployToKubernetesJob
#     displayName: 'Deploy to Kubernetes'
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
#     - task: Kubernetes@1
#       inputs:
#         connectionType: 'Azure Resource Manager'
#         azureSubscriptionEndpoint: 'terraform-aks-azurerm-svc-con'
#         azureResourceGroup: 'terraform-aks-dev'
#         kubernetesCluster: 'terraform-aks-dev-cluster'
#         namespace: 'default'
#         command: 'apply'
#         arguments: '-f $(System.DefaultWorkingDirectory)/kube-manifests/01-Dev-Environment/01-Dev-Namespace.yaml'
#         secretType: 'dockerRegistry'
#         containerRegistryType: 'Azure Container Registry'
#         azureSubscriptionEndpointForSecrets: 'terraform-aks-azurerm-svc-con'
#         azureContainerRegistry: 'javancapstone.azurecr.io'

#     - task: Kubernetes@1
#       inputs:
#         connectionType: 'Azure Resource Manager'
#         azureSubscriptionEndpoint: 'terraform-aks-azurerm-svc-con'
#         azureResourceGroup: 'terraform-aks-dev'
#         kubernetesCluster: 'terraform-aks-dev-cluster'
#         namespace: 'dev-env'
#         command: 'apply'
#         arguments: '-f $(System.DefaultWorkingDirectory)/kube-manifests/01-Dev-Environment/02-Dev-Deployment.yaml'
#         secretType: 'dockerRegistry'
#         containerRegistryType: 'Azure Container Registry'
#         azureSubscriptionEndpointForSecrets: 'terraform-aks-azurerm-svc-con'
#         azureContainerRegistry: 'javancapstone.azurecr.io'

# #Stage 6:Deploys Kubernetes manifests representing a Quality assurance environment, deployment, and load balancer
# - stage: DeployQAEnv
#   displayName: 'DeployQAEnv'
#   jobs:
#   - job: DeployToKubernetesJob
#     displayName: 'Deploy to Kubernetes'
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
    
#     - task: Kubernetes@1
#       inputs:
#         connectionType: 'Azure Resource Manager'
#         azureSubscriptionEndpoint: 'terraform-aks-azurerm-svc-con'
#         azureResourceGroup: 'terraform-aks-dev'
#         kubernetesCluster: 'terraform-aks-dev-cluster'
#         namespace: 'default'
#         command: 'apply'
#         arguments: '-f $(System.DefaultWorkingDirectory)/kube-manifests/02-QA-Environment/01-QA-Namespace.yaml'
#         secretType: 'dockerRegistry'
#         containerRegistryType: 'Azure Container Registry'
#         azureSubscriptionEndpointForSecrets: 'terraform-aks-azurerm-svc-con'
#         azureContainerRegistry: 'javancapstone.azurecr.io'

#     - task: Kubernetes@1
#       inputs:
#         connectionType: 'Azure Resource Manager'
#         azureSubscriptionEndpoint: 'terraform-aks-azurerm-svc-con'
#         azureResourceGroup: 'terraform-aks-dev'
#         kubernetesCluster: 'terraform-aks-dev-cluster'
#         namespace: 'qa-env'
#         command: 'apply'
#         arguments: '-f $(System.DefaultWorkingDirectory)/kube-manifests/02-QA-Environment/02-QA-Deployment.yaml --force'
#         secretType: 'dockerRegistry'
#         containerRegistryType: 'Azure Container Registry'
#         azureSubscriptionEndpointForSecrets: 'terraform-aks-azurerm-svc-con'
#         azureContainerRegistry: 'javancapstone.azurecr.io'

# #Stage 7 :Sends email to ask for manual permission
# - stage: ManualValidation
#   displayName: 'Manual Validation'
#   jobs:
#   - job: ManualValidationJob
#     displayName: 'Manual Validation'
#     pool: server
#     steps:
#     - task: ManualValidation@0
#       displayName: 'Manual Validation'
#       inputs:
#         notifyUsers: 'javancrosdale@gmail.com'
#         instructions: 'Approve Prod-Environment'

# #Stage 8:Deploys Kubernetes manifests representing a production environment, deployment, and load balancer
# - stage: DeployProdEnv
#   displayName: 'DeployProdEnv'
#   jobs:
#   - job: DeployToKubernetesJob
#     displayName: 'Deploy to Kubernetes'
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
    
#     - task: Kubernetes@1
#       inputs:
#         connectionType: 'Azure Resource Manager'
#         azureSubscriptionEndpoint: 'terraform-aks-azurerm-svc-con'
#         azureResourceGroup: 'terraform-aks-dev'
#         kubernetesCluster: 'terraform-aks-dev-cluster'
#         namespace: 'default'
#         command: 'apply'
#         arguments: '-f $(System.DefaultWorkingDirectory)/kube-manifests/03-Prod-Environment/01-Prod-Namespace.yaml'
#         secretType: 'dockerRegistry'
#         containerRegistryType: 'Azure Container Registry'
#         azureSubscriptionEndpointForSecrets: 'terraform-aks-azurerm-svc-con'
#         azureContainerRegistry: 'javancapstone.azurecr.io'

#     - task: Kubernetes@1
#       inputs:
#         connectionType: 'Azure Resource Manager'
#         azureSubscriptionEndpoint: 'terraform-aks-azurerm-svc-con'
#         azureResourceGroup: 'terraform-aks-dev'
#         kubernetesCluster: 'terraform-aks-dev-cluster'
#         namespace: 'prod-env'
#         command: 'apply'
#         arguments: '-f $(System.DefaultWorkingDirectory)/kube-manifests/03-Prod-Environment/02-Prod-Deployment.yaml'
#         secretType: 'dockerRegistry'
#         containerRegistryType: 'Azure Container Registry'
#         azureSubscriptionEndpointForSecrets: 'terraform-aks-azurerm-svc-con'
#         azureContainerRegistry: 'javancapstone.azurecr.io'

